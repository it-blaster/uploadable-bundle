<?php
/**
 * Created by PhpStorm.
 * User: sanbright
 * Date: 23.08.16
 * Time: 18:56
 */

namespace Fenrizbes\UploadableBundle\Form\Extension;


use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormView;
use Symfony\Component\Form\FormBuilderInterface;

use Symfony\Component\Form\FormInterface;

class FileNameTypeExtension extends AbstractTypeExtension
{
    public function getExtendedType() {
        if(static::isLegacy()) {
            return FileType::class;
        }
        else {
            return 'file';
        }
    }

    public function buildForm(FormBuilderInterface $builder, array $options) {
        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
        $builder->addEventListener(FormEvents::POST_SUBMIT, [
            $this,
            'onPostSubmit'
        ]);
    }

    public function onPostSubmit(FormEvent $event) {
        $fieldName = $event->getForm()->getName();
        $fileData = $event->getData();

        $object = $event->getForm()->getParent()->getData();
        if(!$event->getForm()->getConfig()->getOption('multiple')) {
            if(method_exists($object, 'setOriginalFileName')) {
                $object->setOriginalFileName($fieldName, $fileData->getClientOriginalName());
            }
        }
        else {
            if(is_array($event->getForm()->getData())) {
                foreach($event->getForm()->getData() as $key => $item) {
                    if(method_exists($item, 'setOriginalFileName')) {
                        $item->setOriginalFileName($fieldName, $fileData[$key]->getClientOriginalName()); //$item->getClientOriginalName()
                    }
                }
            }
        }
    }

    public static function isLegacy() {
        return !method_exists('Symfony\Component\Form\AbstractType', 'getBlockPrefix');
    }

}